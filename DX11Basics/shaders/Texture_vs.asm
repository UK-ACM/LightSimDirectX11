//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBuf
// {
//
//   float4x4 transform;                // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBuf                              cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Position                 0   xyz         0     NONE   float   xyz 
// TexCoord                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TexCoord                 0   xy          0     NONE   float   xy  
// SV_POSITION              0   xyzw        1      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output o0.xy
dcl_output_siv o1.xyzw, position
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- pos.x; v0.y <- pos.y; v0.z <- pos.z; 
//   v1.x <- tex.x; v1.y <- tex.y; 
//   o1.x <- <main return value>.pos.x; o1.y <- <main return value>.pos.y; o1.z <- <main return value>.pos.z; o1.w <- <main return value>.pos.w; 
//   o0.x <- <main return value>.tex.x; o0.y <- <main return value>.tex.y
//
#line 12 "C:\Dev\DX11Basics\DX11Basics\shaders\Texture_vs.hlsl"
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vso.pos.x
dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vso.pos.y
dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vso.pos.z
dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vso.pos.w

#line 13
mov r0.xy, v1.xyxx  // r0.x <- vso.tex.x; r0.y <- vso.tex.y

#line 14
mov o1.xyzw, r1.xyzw
mov o0.xy, r0.xyxx
ret 
// Approximately 10 instruction slots used
